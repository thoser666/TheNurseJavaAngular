# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
postgres-container:
    runs-on: ubuntu-latest
    container: node
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PGHOST: postgres
      PGUSER: postgres
      PGDATABASE: postgres
      PGPASSWORD: postgres

    steps:
      - name: Install postgresql-client
        run: |
          apt-get update
          apt-get install --yes postgresql-client

      - name: Connect to PostgreSQL with CLI
        run: psql -c 'SELECT VERSION();'

      - name: Show max connections
        run: psql -c 'SHOW max_connections;'

      - name: Install pg
        run: npm install pg

      - name: Connect to PostgreSQL with Node.js
        run: |
          cat > client.js << EOF
          const pg = require('pg');
          const client = new pg.Client();
          client.connect();
          client.query('SELECT VERSION()').then((result) => {
            console.log(result.rows[0]);
            client.end();
          });
          EOF
          node client.js

  postgres-service:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    env:
      PGHOST: localhost
      PGUSER: postgres
      PGDATABASE: postgres
      PGPASSWORD: postgres

    steps:
      - name: Install postgresql-client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Connect to PostgreSQL with CLI
        run: psql -c 'SELECT VERSION();'

      - name: Show PostgreSQL config file
        run: psql -c 'SHOW config_file;'

      - name: Alter max connections
        run: |
          docker exec -i postgres bash << EOF
            sed -i -e 's/max_connections = 100/max_connections = 1000/' /var/lib/postgresql/data/postgresql.conf
            sed -i -e 's/shared_buffers = 128MB/shared_buffers = 2GB/' /var/lib/postgresql/data/postgresql.conf
          EOF
          docker restart --time 0 postgres
          sleep 5

      - name: Show max connections
        run: psql -c 'SHOW max_connections;'

      - name: Install pg
        run: npm install pg

      - name: Connect to PostgreSQL with Node.js
        run: |
          cat > client.js << EOF
          const pg = require('pg');
          const client = new pg.Client();
          client.connect();
          client.query('SELECT VERSION()').then((result) => {
            console.log(result.rows[0]);
            client.end();
          });
          EOF
          node client.js
     zookeeper-1:
        image: confluentinc/cp-zookeeper:latest
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - "22181:2181"

     zookeeper-2:
          image: confluentinc/cp-zookeeper:latest
          environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
          ports:
            - "32181:2181"

     kafka-1:
          image: confluentinc/cp-kafka:latest
          depends_on:
            - zookeeper-1
            - zookeeper-2

          ports:
            - "29092:29092"
          environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
     kafka-2:
          image: confluentinc/cp-kafka:latest
          depends_on:
            - zookeeper-1
            - zookeeper-2
          ports:
            - "39092:39092"
          environment:
            KAFKA_BROKER_ID: 2
            KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:39092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    

  build:

    runs-on: ubuntu-latest

    
    steps:

    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml



    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
